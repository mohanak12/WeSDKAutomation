package com.pismo.lib.appSpecific;

import java.util.List;

import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

import com.pismo.lib.generic.Browser;
import com.pismo.lib.generic.ElementTags;
import com.pismo.lib.generic.LocateBy;
import com.pismo.lib.generic.Log;
import com.pismo.lib.generic.SoftAssert;


public class SearchVideos {
	
	private static SoftAssert SAssert= new SoftAssert();
	
	public static void searchVideo(WebDriver driver, String videoName)
	{
		Browser.getActions().click(Browser.getElements().element(driver, ElementTags.linkHomeSearch));
		Browser.getActions().sendKeys(Browser.getElements().element(driver, ElementTags.txtSearchVideo), videoName);
		Browser.getActions().sendKeys(Browser.getElements().element(driver, ElementTags.txtSearchVideo), Keys.ENTER);
	}

	public static SoftAssert verifySearchVideoListing(WebDriver driver, String videoName, int expectedSearchCount, String TimsID)
	{
		String header = Browser.getElements().element(driver, ElementTags.labelSerachResult).getText();
		String expected=  "Search Results for \"" + videoName + "\"(" + expectedSearchCount + ")";
		SAssert.assertEquals(header, expected, "FAILED | TIMS ID:" + TimsID + " |  Incorrect header is shown.");
		//Verify Search result count with listed videos
		if(expectedSearchCount>=1)
		{
			
			List<WebElement> videoList = Browser.getElements().elements(driver, ElementTags.linkSearchVideoTitle);
			int size = videoList.size();
			SAssert.assertEquals(size, expectedSearchCount,"FAILED | TIMS ID:" + TimsID + " | Expected search Count doesn't match");
		}
		else
		{
			SAssert.assertEquals(Browser.getElements().element(driver, ElementTags.labelSearchNoResult).getText(),
					"No videos were found that you have access to.", 
					"FAILED | TIMS ID:" + TimsID + " | Videos found in the list for non existing video search.");
			SAssert.assertFalse(Browser.getElements().isElementPresent(driver, ElementTags.labelSearchCategoryResult)
					,"FAILED | TIMS ID:" + TimsID + " | Category section is displayed even for no results case.");
		}
		return SAssert;
	}
	
	
	public static String getVideoIdFromSearchResults(WebDriver driver, String videoName)
	{
		List<WebElement> VideoTitles= Browser.getElements().elements(driver, ElementTags.linkSearchVideoTitle);
		for (WebElement element : VideoTitles) {
			if (element.getText().equals(videoName))
			{
				return element.getAttribute("id");
			}
		}
		return null;
	}
	
	public static int getVideoPositionFromSearchResults(WebDriver driver, String videoName)
	{
		List<WebElement> VideoTitles= Browser.getElements().elements(driver, ElementTags.linkSearchVideoTitle);
		if (VideoTitles.size()==1)
		{
			return 0;
		}else
		{
			for (int i=0 ; i<VideoTitles.size();i++) {
				if (VideoTitles.get(i).getText().equals(videoName))
				{
					return i;
				}
			}
		}
		return -1;
	}
	
	public static String getCategoryLabel(WebDriver driver, int position)
	{
		if (position==0)
		{
			return 	"//*[@id='videoSearchResult']/div/div[2]/div[6]/span[1]";
		}else
		{
			return 	"//*[@id='videoSearchResult']/div["+ position +"]/div[2]/div[6]/span[1]";
		}
	}
	
	public static String getCategoryValue(WebDriver driver, int position)
	{
		if (position==0)
		{
			return 	"//*[@id='videoSearchResult']/div/div[2]/div[6]/span[2]/a";
		}else
		{
			return "//*[@id='videoSearchResult']/div["+ position +"]/div[2]/div[6]/span[2]/a";
		}
	}
	
	public static String getTagslabel(WebDriver driver, int position)
	{
		if (position==0)
		{
			return "//*[@id='videoSearchResult']/div/div[2]/div[6]/span[3]";
		}else
		{
			return "//*[@id='videoSearchResult']/div["+ position +"]/div[2]/div[6]/span[3]";
		}
	}
	
	public static SoftAssert verifySearchedVideoDetails(WebDriver driver, String videoName, String duration, 
			String uploadedBefore, String author, String likes, String views, String description, 
			String categories, String tags, String TimsID)
	{
		String videoTitleID=getVideoIdFromSearchResults(driver, videoName);
		int position = getVideoPositionFromSearchResults(driver, videoName);
		String md5 = videoTitleID.substring(videoTitleID.indexOf('_') + 1);

		SAssert.assertEquals(Browser.getElements().element(driver, 
				videoTitleID,LocateBy.id).getText()
				, videoName ,"FAILED | TIMS ID:" + TimsID + " | Video name is not correct or missing for search result");
		
		WebElement element= Browser.getElements().element(driver, "videoSearchByUser_" + md5,LocateBy.id);
		
		SAssert.assertEquals(Browser.getElements().element(element, "//*[@id='videoSearchByUser_" + md5 +"']/span[1]" ,LocateBy.xpath).getText(),
				"Duration:","FAILED | TIMS ID:" + TimsID + " | Duration: lable is not correct or missing for search result");
		
		SAssert.assertEquals(Browser.getElements().element(element, "//*[@id='videoSearchByUser_" + md5 +"']/span[2]" ,LocateBy.xpath).getText(),
				duration ,"FAILED | TIMS ID:" + TimsID + " | Video duration is not correct or missing for search result " );
		
		SAssert.assertTrue(Browser.getElements().element(element, ElementTags.labelSearchVideoRealteiveTime).getText().contains(uploadedBefore)
				 ,"FAILED | TIMS ID:" + TimsID + " | Video last updated is not correct or missing for search result");
		
		Browser.getElements().getElementLocater(ElementTags.labelSearchVideoAuthor);
		SAssert.assertEquals(Browser.getElements().element(driver,Browser.getElements().getElementLocater() + md5
				, LocateBy.id).getText(), 
				author ,"FAILED | TIMS ID:" + TimsID + " | Auther is not correct or missing for search result");
		
		Browser.getElements().getElementLocater(ElementTags.labelSearchVideoDescription);
		if(Browser.getElements().isElementPresent(driver, Browser.getElements().getElementLocater() + md5, LocateBy.id))
		{
			SAssert.assertEquals(Browser.getElements().element(driver,Browser.getElements().getElementLocater() +md5
					, LocateBy.id).getText(),description,"FAILED | TIMS ID:" + TimsID + " | Description is incorrect for search result");
		}else
		{
			Log.warn("TIMS ID:" + TimsID + " | Video doen't have description.");
		}
		
		
		if (Browser.getElements().isElementPresent(driver, getCategoryLabel(driver, position), LocateBy.xpath))
		{
			SAssert.assertEquals(Browser.getElements().element(driver, getCategoryLabel(driver, position), LocateBy.xpath).getText()
						,"Category:","FAILED | TIMS ID:" + TimsID + " | Category: lable is not correct or missing for search result");
			SAssert.assertEquals(Browser.getElements().element(driver, getCategoryValue(driver, position), LocateBy.xpath).getText()
					, categories , "FAILED | TIMS ID:" + TimsID + " | Category is not correct or missing for search result");
		}else 
		{
			Log.warn("TIMS ID:" + TimsID + " | Video doen't have category.");
		}


		if (Browser.getElements().isElementPresent(driver, getTagslabel(driver, position), LocateBy.xpath))
		{
			SAssert.assertEquals(Browser.getElements().element(driver, getTagslabel(driver, position), LocateBy.xpath).getText()
					, "Tags:" ,"FAILED | TIMS ID:" + TimsID + " | Tags: lable is  not correct or missing for search result");
		}else 
		{
			Log.warn("TIMS ID:" + TimsID + " | Video doen't have Tags.");
		}
		
//		if(Browser.getElements().isElementPresent(driver, "tag_tags", LocateBy.id))
//		{
//			SAssert.assertEquals(driver.findElement(By.id("tag_tags")).getText(), tags);
//		}
		return SAssert;
	}

	public static SoftAssert verifyCategoryResult(WebDriver driver, String[] categories, String TIMSID) {
		
		for (String category : categories) 
		{
			List<WebElement>  elements = Browser.getElements().elements(driver, ElementTags.listSearchCategoryresults);
			for (WebElement webElement : elements) {
				if (category.equals(webElement.getText()))
				{
					SAssert.assertEquals(category, webElement.getText(),
							"FALIED | Category " + category + " is not displayed in the category results.");
				}
			}
		}
		return SAssert;
	}
	
}
