package com.pismo.PismoAutomation;

import java.io.IOException;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import com.jcraft.jsch.JSchException;
import com.pismo.lib.appSpecific.Backup;
import com.pismo.lib.appSpecific.SystemAdministration;
import com.pismo.lib.generic.Browser;
import com.pismo.lib.generic.ConfigProperties;
import com.pismo.lib.generic.ElementTags;
import com.pismo.lib.generic.Fixtures;
import com.pismo.lib.generic.GenericUtils;
import com.pismo.lib.generic.LocateBy;
import com.pismo.lib.generic.Log;
import com.pismo.lib.generic.SSHConnect;
import com.pismo.lib.generic.SoftAssert;
import com.pismo.lib.generic.TestAssert;
import com.pismo.lib.generic.TestStatus;

public class BackUpWithNFSMountTest{
	private WebDriver driver =null;
	private SoftAssert softassert=new SoftAssert();
	private TestAssert testassert=new TestAssert();
	public String baseWindowHandle;
	
	
 @BeforeClass
	public void setUp() throws IOException, InterruptedException 
	{	 
	
	    driver=Fixtures.setupFixture("Backup with NFS mount test class setup initiated.");
	    
	    //Mount NFS if nfs is not mounted
	    
	    baseWindowHandle = Browser.getSwitchto().getBasewindowHandle(driver);
		SystemAdministration.goToSysadminPage(driver);
		
		Browser.getSwitchto().switchToPopupWindow(driver,"LDAP");		
				
		if(SystemAdministration.CheckNFSMountStatus(driver)==false){
			SystemAdministration.mountNFS(driver,Browser.getPropertyFromConfigFile(ConfigProperties.NFS_Host), Browser.getPropertyFromConfigFile(ConfigProperties.NFS_MountPath),4);
	}		
		 Backup.goToBackUp(driver);
	}

			
	@Test(description="Trv588190c,Trv587988c,Trv579465c,Trv588197c,Trv579477c,Trv579455c",enabled = true, priority=1)
	public void manualNFSBackUpEndToEnd()  {				
	
			String backupdt = GenericUtils.RuntimeDatetime();
			String backupfolder = "temp" + backupdt;			
					
			//*************Navigate to backup page*******************************		
			
			Backup.manualBackUP(driver,"NFS", "", "", "", "",backupfolder);
			softassert.merge(Backup.startManualBackup(driver));
			
			// ************Verify backup completed and Last successful statusmessage*********************//
	
			softassert.merge(Backup.VerifyBackupCompletedstatus(driver));
			
			String NFSmountpath = Browser.getPropertyFromConfigFile(ConfigProperties.NFS_MountPath);					
			String backupfilepathonUI = NFSmountpath + "/"+ backupfolder;
			
			softassert.merge(Backup.VerifyLastSuccessfulstatus(driver,backupfilepathonUI));
			
			// *************Check backup tar is copied to backup location on NFSdevice****************************
	
			String backupfilepath = "/cxs/nfs_shared/" + backupfolder + "/"+ "Backup_SnS_MAN_6.0.0_22*";			
			softassert.assertTrue(GenericUtils.checkBackuptarexistsonNFSorLocal(backupfilepath),"Backup tar and log files are not cpoied to backup folder");
						
			softassert.showResults();	
			TestStatus.pass("PASSED | TIMS ID : Trv588190c,Trv587988c,Trv579465c,Trv588197c,Trv579477c,Trv579455c|Backup is successful on NFS device");
		
		}
	
	
	
	@Test(description="Trv588195c,Trv579467c",enabled = true, priority=2)
	public void cancelManualNFSBackUp()  {		
			
		Backup.manualBackUP(driver,"NFS", "", "", "", "", "temp1");	
		
		Browser.getActions().click(Browser.getElements().element(driver, ElementTags.bttnManualBackup));
		WebDriverWait wait = new WebDriverWait(driver, 5);
		WebElement element = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("idCurrentStatus")));
		
		String msg=Backup.cancelBackUp(driver);
		
		softassert.assertTrue(msg.contains("Backup cancelled by anisinha on"),"Backup cancellation is failed");	
				
		if(Browser.getElements().element(driver, "backupDevice",LocateBy.id).isDisplayed()==false)
		{		
		 Browser.getActions().click(Browser.getElements().element(driver,ElementTags.linkgenerateCSR));			
		}
		
		Browser.getActions().click(Browser.getElements().element(driver, ElementTags.bttnManualBackup));		
		Browser.getWaits().wait(5);	
		
		softassert.merge(Backup.VerifyBackupCompletedstatus(driver));
		
		softassert.showResults();
		
		TestStatus.pass("PASSED | TIMS ID : Trv588195c,Trv579467c|Admin is able to cancel in progress backup and start new backup");
	}


	@Test(description="Trv588265c",enabled = true, priority=3)
	public void multiLevelNFSBackUp()  {		
			
			
		String backupdt = GenericUtils.RuntimeDatetime();
		String backupfolder = "temp" + backupdt + "/b/c";
		String backupfilepath = "/cxs/nfs_shared/" + backupfolder + "/"+ "Backup_SnS_MAN_6.0.0_22*";	
		
		Backup.manualBackUP(driver,"NFS", "", "", "", "",backupfolder);				
		softassert.merge(Backup.startManualBackup(driver));		
		softassert.merge(Backup.VerifyBackupCompletedstatus(driver));
		
		String NFSmountpath = Browser.getPropertyFromConfigFile(ConfigProperties.NFS_MountPath);					
		String backupfilepathonUI = NFSmountpath + "/" + backupfolder;		
		
		softassert.merge(Backup.VerifyLastSuccessfulstatus(driver,backupfilepathonUI));
		
		// *************Check backup tar is copied to backup location on NFS device****************************			
		
		softassert.assertTrue(GenericUtils.checkBackuptarexistsonNFSorLocal(backupfilepath));
		
		softassert.showResults();
		TestStatus.pass("PASSED | TIMS ID : Trv588265c");
	}

	
	@Test(description="",enabled = true, priority=4)
	public void testNFSBackUpBlankLocation() {			
					
			Backup.manualBackUP(driver,"NFS", "", "", "", "", "");
			softassert.merge(Backup.startManualBackup(driver));
			
			String backupfilepath = "/cxs/nfs_shared/" + "Backup_SnS_MAN_6.0.0_22*";		
			softassert.assertTrue(GenericUtils.checkBackuptarexistsonNFSorLocal(backupfilepath),"Backup tar and log files are not get copied on NFS");
						
			softassert.showResults();
			TestStatus.pass("PASSED | TIMS ID :Trv579465c");
	}
		

	@Test(description="Trv588885c",enabled = true, priority=5)
	public void testBackUpOptionWhenNFSMounted(){		
		    				
			softassert.assertTrue(Backup.verifyBackupOptionPresent(driver,"NFS"),"NFS option is not present in 'Select device to backup' dropdown");			
			softassert.assertTrue(Backup.verifyBackupOptionPresent(driver,"FTP"),"FTP option is not present in 'Select device to backup' dropdown");			
			softassert.assertTrue(Backup.verifyBackupOptionPresent(driver,"SFTP"),"SFTP option is not present in 'Select device to backup' dropdown");			
			softassert.assertFalse(Backup.verifyBackupOptionPresent(driver,"Local Storage"),"Local Storage option is  present in 'Select device to backup' dropdown");
					
			softassert.showResults();
			TestStatus.pass("PASSED | TIMS ID :Trv588885c");
	}

	@Test(description="Trv588245c",groups = "Sanity", enabled = true, priority=6)
	public void dailyAutomaticNFSBackUp() throws InterruptedException,IOException {	
			
			String time = "12:00", device = "NFS", location = "nfs_backup_Daily";
					
			Backup.setScheduledBackUp(driver,"Daily", "", time, device,"", "", "", "", location);
			Backup.ClickScheduleBackup(driver);
			
			testassert.assertTrue(Backup.verifyScheduleSuccess(driver,time, device, location),"Failed to Schedule backup");
					
			TestStatus.pass("PASSED | TIMS ID :Trv588245c");
	}


	@Test(description="Trv588247c",enabled = true, priority=7)
	public void weeklyAutomaticNFSBackUp() throws InterruptedException,IOException, JSchException {	
				
			String day=Backup.Getschedulebackupday();			
			
			String time =Backup.Getschedulebackuptime();
			
			String device = "NFS", location = "nfs_backup_Weekly";				
					
			Backup.setScheduledBackUp(driver,"Weekly", day, time,device, "", "", "", "", location);
			Backup.ClickScheduleBackup(driver);		
				
			testassert.assertTrue(Backup.verifyScheduleSuccess(driver,time, device, location),"Failed to schedule backup hence wrong Next schedule backup message is displayed");
			
			TestStatus.pass("PASSED | TIMS ID :Trv588247c");
			
	}


	@Test(description="Trv588248c",groups = "Sanity", enabled = true, priority=8)
	public void fortnightlyAutomaticNFSBackUp() throws InterruptedException,IOException, JSchException {
					
			String day=Backup.Getschedulebackupday();						
			String time =Backup.Getschedulebackuptime();				
			String device = "NFS", location = "nfs_backup_2weeks";		
			
			Backup.setScheduledBackUp(driver,"Every 2 weeks", day, time,device, "", "", "", "", location);						
			Backup.ClickScheduleBackup(driver);
					
			testassert.assertTrue(Backup.verifyScheduleSuccess(driver,time, device, location),"Failed to schedule backup hence wrong Next schedule backup message is displayed");
			
			TestStatus.pass("PASSED | TIMS ID :Trv588248c");
	}


	@Test(description="Trv588248c",enabled = true, priority=9)
	public void fourWeeksAutomaticFTPBackUp() throws InterruptedException,IOException, JSchException {
		
				
			String day=Backup.Getschedulebackupday();		
			String time =Backup.Getschedulebackuptime();		
			String device = "FTP", location = "ftp_backup";		
					
			Backup.setScheduledBackUp(driver,"Every 4 weeks", day, time,
					device, Browser.getPropertyFromConfigFile(ConfigProperties.ftphost),
					Browser.getPropertyFromConfigFile(ConfigProperties.ftpport),
					Browser.getPropertyFromConfigFile(ConfigProperties.ftpusername),
					Browser.getPropertyFromConfigFile(ConfigProperties.ftppassword), location);
			
			Backup.ClickScheduleBackup(driver);				
			testassert.assertTrue(Backup.verifyScheduleSuccess(driver,time, device, location),"Failed to schedule backup hence wrong Next schedule backup message is displayed");
			
			TestStatus.pass("PASSED | TIMS ID :Trv588248c");
	}

	
	@Test(description="",enabled = true, priority=10)
	public void eightWeeksAutomaticSFTPBackUp() throws InterruptedException,IOException, JSchException {
		
				
			String day=Backup.Getschedulebackupday();		
			String time =Backup.Getschedulebackuptime();		
			String  device = "SFTP", location = "nfs_backup";		
			
			Backup.setScheduledBackUp(driver,"Every 8 weeks", day, time,
					device, Browser.getPropertyFromConfigFile(ConfigProperties.sftphost),
					Browser.getPropertyFromConfigFile(ConfigProperties.sftpport),
					Browser.getPropertyFromConfigFile(ConfigProperties.sftpusername),
					Browser.getPropertyFromConfigFile(ConfigProperties.sftppassword), location);
			
			Backup.ClickScheduleBackup(driver);
					
			testassert.assertTrue(Backup.verifyScheduleSuccess(driver,time, device, location),"Failed to schedule backup hence wrong Next schedule backup message is displayed");
			
			TestStatus.pass("PASSED | TIMS ID :Trv604885c");
			
	}


	@Test(description="",enabled = true, priority=11)
	public void twelveWeeksAutomaticNFSBackUp() throws InterruptedException,IOException, JSchException {
					
			String day=Backup.Getschedulebackupday();		
			String time =Backup.Getschedulebackuptime();		
			String device = "NFS", location = "nfs_backup_every12weeks";		
			
			Backup.setScheduledBackUp(driver,"Every 12 weeks", day,time, device, "", "", "", "", location);
			
			Backup.ClickScheduleBackup(driver);		
			testassert.assertTrue(Backup.verifyScheduleSuccess(driver,time, device, location),"Failed to schedule backup hence wrong Next schedule backup message is displayed");
			
			TestStatus.pass("PASSED | TIMS ID :Trv587975c");
	}


	@Test(description="Trv604887c", enabled = true, priority=12)
	public void blankDataFTPBackUpSchedule() {	
			
			Backup.setScheduledBackUp(driver,"Select backup frequency","Select Day", "Select Time", "FTP", "", "", "", "", "");
			Backup.ClickScheduleBackup(driver);	
			
			System.out.println(Browser.getElements().element(driver,ElementTags.MsgBlankFrequency).getText());
			
			softassert.assertEquals(Browser.getElements().element(driver,ElementTags.MsgBlankFrequency).getText(),"This field cannot be empty");			
			softassert.assertEquals(Browser.getElements().element(driver,ElementTags.MsgBlankDay).getText(),"This field cannot be empty");			
			softassert.assertEquals(Browser.getElements().element(driver,ElementTags.MsgBlankHost).getText(),"This field cannot be empty");			
			softassert.assertEquals(Browser.getElements().element(driver,ElementTags.MsgBlankPort).getText(),"This field cannot be empty");			
			softassert.assertEquals(Browser.getElements().element(driver,ElementTags.MsgBlankusername).getText(),"This field cannot be empty");			
			softassert.assertEquals(Browser.getElements().element(driver,ElementTags.MsgBlankpassword).getText(),"This field cannot be empty");			
			softassert.assertEquals(Browser.getElements().element(driver,ElementTags.MsgBlankLocation).getText(),"This field cannot be empty");
					
			softassert.showResults();
			TestStatus.pass("PASSED | TIMS ID :	 Trv604887c");
	}

	@Test(description="Trv604888c",enabled = true, priority=13)
	
	public void blankDataSFTPBackUpSchedule() throws InterruptedException,IOException {
		
			Backup.setScheduledBackUp(driver,"Select backup frequency","Select Day", "Select Time", "SFTP", "", "", "", "", "");
			Backup.ClickScheduleBackup(driver);
			
			softassert.assertEquals(Browser.getElements().element(driver,ElementTags.MsgBlankFrequency).getText(),"This field cannot be empty");			
			softassert.assertEquals(Browser.getElements().element(driver,ElementTags.MsgBlankDay).getText(),"This field cannot be empty");			
			softassert.assertEquals(Browser.getElements().element(driver,ElementTags.MsgBlankHost).getText(),"This field cannot be empty");			
			softassert.assertEquals(Browser.getElements().element(driver,ElementTags.MsgBlankPort).getText(),"This field cannot be empty");			
			softassert.assertEquals(Browser.getElements().element(driver,ElementTags.MsgBlankusername).getText(),"This field cannot be empty");			
			softassert.assertEquals(Browser.getElements().element(driver,ElementTags.MsgBlankpassword).getText(),"This field cannot be empty");			
			softassert.assertEquals(Browser.getElements().element(driver,ElementTags.MsgBlankLocation).getText(),"This field cannot be empty");
					
			softassert.showResults();
			TestStatus.pass("PASSED | TIMS ID :	 Trv604888c");
		}

	/**
	 * TIMS ID :
	 * 
	 * @throws InterruptedException
	 * @throws IOException
	 */

	@Test(description="Trv604889c",enabled = true, priority=14)
	public void blankDataNFSBackUpSchedule() throws InterruptedException,IOException {
					
			Backup.setScheduledBackUp(driver,"Select backup frequency","Select Day", "Select Time", "NFS", "", "", "", "", "");
			Backup.ClickScheduleBackup(driver);
			
			softassert.assertEquals(Browser.getElements().element(driver,ElementTags.MsgBlankFrequency).getText(),"This field cannot be empty");			
			softassert.assertEquals(Browser.getElements().element(driver,ElementTags.MsgBlankDay).getText(),"This field cannot be empty");					
			
			softassert.showResults();
			TestStatus.pass("PASSED | TIMS ID :	Trv604889c");
	}
	
	@Test(description="Trv587927c,Trv588885c,Trv587937c",enabled = true, priority=15)
	public void Backup_Schedulebuttons()  {				
	
			String backupdt = GenericUtils.RuntimeDatetime();
			String backupfolder = "temp" + backupdt;			
					
			//*************Navigate to backup page*******************************		
			if(Browser.getElements().element(driver, "backupDevice",LocateBy.id).isDisplayed()==false)
			{		
			 Browser.getActions().click(Browser.getElements().element(driver,ElementTags.linkgenerateCSR));			
			}
			
			softassert.assertEquals(Browser.getElements().element(driver,ElementTags.bttnLocalConfig).isDisplayed(),false);			
			softassert.assertEquals(Browser.getElements().element(driver,ElementTags.bttnLocalConfigContent).isDisplayed(),false);
						
			Backup.manualBackUP(driver,"NFS", "", "", "", "",backupfolder);			
			softassert.merge(Backup.startManualBackup(driver));
			
			softassert.assertEquals(Browser.getElements().element(driver,ElementTags.bttnManualBackup).isEnabled(), false);						
			softassert.assertEquals(Browser.getElements().element(driver,ElementTags.bttnSceduleBackup).isEnabled(), false);			
			
			// ************Verify backup completed and Last successful statusmessage*********************//
			softassert.merge(Backup.VerifyBackupCompletedstatus(driver));			
			
			softassert.showResults();	
			TestStatus.pass("PASSED | TIMS ID :Trv587927c, Trv588885c,Trv587937c|Backup and scheduled backup buttons are in disabled state when backup is in progress");
		
		}		
	
	@Test(description="Trv588825c", enabled=true,priority=16)
	public void manualSFTPBackUpEndToEnd() throws Exception {
			  
			String backupdt=GenericUtils.RuntimeDatetime();
			String backupfolder="temp"+backupdt;
			
			//*******************Navigate to backup page and start manual backup on FTP device****************************
				
			Backup.manualBackUP(driver,"SFTP",Browser.getPropertyFromConfigFile(ConfigProperties.sftphost),Browser.getPropertyFromConfigFile(ConfigProperties.sftpport),Browser.getPropertyFromConfigFile(ConfigProperties.sftpusername),Browser.getPropertyFromConfigFile(ConfigProperties.sftppassword), backupfolder);
			Backup.startManualBackup(driver);  
			
			//************Verify backup completed and Last successful status message*********************
			
			softassert.merge(Backup.VerifyBackupCompletedstatus(driver));
			
			softassert.merge(Backup.VerifyLastSuccessfulstatus(driver,backupfolder));
			
			//*************Check backup file is copied to backup location on SFTP device****************************	  	  
			String backupfilepath=backupfolder+ "/";
			int portno=Integer.valueOf(Browser.getPropertyFromConfigFile(ConfigProperties.sftpport));
			
			softassert.assertTrue(GenericUtils.CheckBackuptarexistsonSFTP(backupfilepath, portno),"Failed"); 		
						
			softassert.showResults();
			
			TestStatus.pass("PASSED | TIMS ID : Trv588825c| Verify that back-up file is created after SFTP backup.");
	}
	
	
	@AfterClass
	public void tearDown(){
		
		String ftphomedir="/home/"+Browser.getPropertyFromConfigFile(ConfigProperties.ftpusername);
		String sftphomedir="/home/"+Browser.getPropertyFromConfigFile(ConfigProperties.sftpusername);
		String NFSdir=Browser.getPropertyFromConfigFile(ConfigProperties.NFS_MountPath);
				
		String ftpcommand="rm -rf "+ftphomedir+"/temp*";
		String sftpcommand="rm -rf "+sftphomedir+"/temp*";		
		String nfscommand="rm -rf "+ftphomedir+"/nfs*";		
		String nfscommand1="rm -rf "+ftphomedir+"/Backup*";		
		
		//****************delete ftp backup files*************************************
		
		SSHConnect.connectToServer(Browser.getPropertyFromConfigFile(ConfigProperties.ftphost), Browser.getPropertyFromConfigFile(ConfigProperties.ftpvmusername),Browser.getPropertyFromConfigFile(ConfigProperties.ftpvmpassword));
		int status=SSHConnect.executeCommand(ftpcommand);
		if(status==0)
		{
			Log.info("Backup files are deleted successfully from FTP device ");		
		}
		else
		{
			Log.error("Failed to delete backup files from FTP device  ");			
		}
		
		SSHConnect.disconnectFromServer();
		
		//********************delete sftp backup files************************************
		SSHConnect.connectToServer(Browser.getPropertyFromConfigFile(ConfigProperties.sftphost), Browser.getPropertyFromConfigFile(ConfigProperties.sftpusername),Browser.getPropertyFromConfigFile(ConfigProperties.sftpvmpassword));
		status=SSHConnect.executeCommand(sftpcommand);
		if(status==0)
		{
			Log.info("Backup files are deleted successfully from SFTP device ");		
		}
		else
		{
			Log.error("Failed to delete backup files from SFTP device");			
		}
		
		SSHConnect.disconnectFromServer();
		
		//**********************delete nfs backup files*********************************
		SSHConnect.connectToServer(Browser.getPropertyFromConfigFile(ConfigProperties.NFS_Host), Browser.getPropertyFromConfigFile(ConfigProperties.NFS_vmusername),Browser.getPropertyFromConfigFile(ConfigProperties.NFS_vmpassword));
		
		status=SSHConnect.executeCommand(nfscommand);
		if(status==0)
		{
			Log.info("Backup files are deleted successfully from SFTP device ");		
		}
		else
		{
			Log.error("Failed to delete backup files from SFTP device");			
		}
		SSHConnect.disconnectFromServer();
		
		SSHConnect.connectToServer(Browser.getPropertyFromConfigFile(ConfigProperties.NFS_Host), Browser.getPropertyFromConfigFile(ConfigProperties.NFS_vmusername),Browser.getPropertyFromConfigFile(ConfigProperties.NFS_vmpassword));
		
		status=SSHConnect.executeCommand(nfscommand1);
		if(status==0)
		{
			Log.info("Backup files are deleted successfully from SFTP device ");		
		}
		else
		{
			Log.error("Failed to delete backup files from SFTP device");			
		}
		SSHConnect.disconnectFromServer();
		Fixtures.tearDownFixture(driver);
	}
}
