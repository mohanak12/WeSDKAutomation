package com.pismo.PismoAutomation;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;


import com.pismo.lib.appSpecific.Backup;
import com.pismo.lib.generic.Browser;
import com.pismo.lib.generic.ConfigProperties;
import com.pismo.lib.generic.ElementTags;
import com.pismo.lib.generic.ExpectedCondition;
import com.pismo.lib.generic.Fixtures;
import com.pismo.lib.generic.Log;
import com.pismo.lib.generic.SoftAssert;
import com.pismo.lib.generic.TestStatus;
import com.pismo.lib.appSpecific.ECDS;

public class ECDSMediaDeliveryTest {

	private WebDriver driver;

	private SoftAssert SAssert = new SoftAssert();

	private WebElement element;
	public String baseWindowHandle;

	private static String registerErrorMsg = "Failed to register with CDS network. Invalid registration details.";
	private static String contentErrorMsg = "Content Origin Name is incorrect.";
	private static String emptyErrorMsg = "This field cannot be empty";
	private static String registerMessage1 = "ECDS Registration is in progress...";
	private static String registerMessage2 = "Registration successfully completed.";
	private static String saveMessage1 = "Saving is in progress...";
	private static String saveMessage2 = "Delivery Services added successfully.";
	private static String deleteMessage1 = "CDS deregistration is in progress ...";
	private static String deleteMessage2 = "CDS delete successfully done.";


	private static String ip = Browser.getPropertyFromConfigFile(ConfigProperties.CDSIP);
	private static String port = Browser.getPropertyFromConfigFile(ConfigProperties.CDSPort);
	private static String contentOrigin = Browser.getPropertyFromConfigFile(ConfigProperties.Content_Origin);
	private static String username = Browser.getPropertyFromConfigFile(ConfigProperties.CDS_user);
	private static String password = Browser.getPropertyFromConfigFile(ConfigProperties.CDS_password);

	@BeforeClass
	public void setUp() {
		driver = Fixtures.setupFixture("ECDS setup initialzed.");
		baseWindowHandle = Browser.getSwitchto().getBasewindowHandle(driver);
		Backup.goToSysadminPage(driver);
		Browser.getSwitchto().switchToPopupWindow(driver, "LDAP");

		// ....navigate to page
		ECDS.gotoCDSPage(driver);

	}

	@Test(description="TIMS ID: Trv590876c,Trv589602c, Trv589603c, Trv590877c, Trv590878c ", enabled=true, priority=1)
	public void verifyMediaDeliverUI(){

		ECDS.cleanUp(driver);

		SAssert.merge(ECDS.verifyMediaDeliveryUI(driver,"Trv590876c,Trv589602c "));

		// ..Click on the CDS radio button
		Browser.getActions().click(Browser.getElements().element(driver, ElementTags.bttnCDS));

		//verify ui 
		SAssert.merge(ECDS.verifyUI(driver, "Trv589603c, Trv590877c, Trv590878c"));
		SAssert.showResults();

		TestStatus.pass("PASSED | TIMS ID: Trv590876c,Trv589602c, Trv589603c, Trv590877c, Trv590878c | UI verified successfully");

	}

	@Test(description="TIMS ID: Trv590878c", enabled=true, priority=2)
	public void verifyRadioSelection(){

		element = Browser.getElements().element(driver,ElementTags.bttnCDS);
		if(!element.isSelected()){
			element.click();
			SAssert.assertTrue(Browser.getElements().element(driver,ElementTags.bttnCDS).isSelected(), "FAILED | TIMS ID: Trv590878c | CDS radio option is not selected");
			Browser.getElements().element(driver,ElementTags.bttnSNS).click();
			SAssert.assertTrue(Browser.getElements().element(driver,ElementTags.bttnSNS).isSelected(), "FAILED | TIMS ID: Trv590878c | SNS radio option is not selected");

		}else{
			Browser.getElements().element(driver,ElementTags.bttnSNS).click();
			SAssert.assertTrue(Browser.getElements().element(driver,ElementTags.bttnSNS).isSelected(), "FAILED | TIMS ID: Trv590878c | SNS radio option is not selected");
			Browser.getElements().element(driver,ElementTags.bttnCDS).click();
			SAssert.assertTrue(Browser.getElements().element(driver,ElementTags.bttnCDS).isSelected(), "FAILED | TIMS ID: Trv590878c | CDS radio option is not selected");
		}
		SAssert.showResults();

		TestStatus.pass("PASSED | TIMS ID: Trv590878c | Radio button selection works successfully");


	}



	@Test(description = "TIMS ID: Trv590887c, Trv589610c",priority = 3, enabled = true)
	public void verifyCancelECDS() {

		ECDS.cleanUp(driver);

		// ..Click on the CDS radio button
		Browser.getActions().click(Browser.getElements().element(driver, ElementTags.bttnCDS));

		// enter details
		ECDS.enterDetails(
				driver, ip, port, contentOrigin, username, password);

		SAssert.assertTrue(Browser.getElements().element(driver, ElementTags.bttnCancel).isEnabled(),
				"FAILED | TIMS ID: Trv590887c, Trv589610c | Cancel button is not enabled");
		Browser.getActions().click(Browser.getElements().element(driver, ElementTags.bttnCancel));

		// verify text fields are empty
		SAssert.merge(ECDS.verifyEmptyFields(driver, "Trv590887c, Trv589610c"));
		SAssert.showResults();

		TestStatus
		.pass("PASSED | TIMS ID: Trv590887c, Trv589610c | CDS cancelled successfully");
	}

	@Test(description="TIMS ID: Trv589611c, Trv590888c, Trv590883c, Trv590889c", enabled=true, priority=4)
	public void verifyValidations(){

		ECDS.cleanUp(driver);

		// ..Click on the CDS radio button
		Browser.getActions().click(Browser.getElements().element(driver, ElementTags.bttnCDS));

		//Empty field validation
		SAssert.merge(ECDS.verifyIncorrectErrorMessages(driver, "", port, contentOrigin, username, password,emptyErrorMsg,"Trv589611c, Trv590888c, Trv590883c, Trv590889c"));

		//PWD incorrect
		SAssert.merge(ECDS.verifyIncorrectErrorMessages(driver, ip, port, contentOrigin, username, "anc123",registerErrorMsg, "Trv589611c, Trv590888c, Trv590883c, Trv590889c"));

		//Content-origin is incorrect
		SAssert.merge(ECDS.verifyIncorrectErrorMessages(driver, ip, port, "COHO-origin-test", username, password,contentErrorMsg, "Trv589611c, Trv590888c, Trv590883c, Trv590889c"));

		SAssert.showResults();
		TestStatus.pass("PASSED | TIMS ID: Trv589611c, Trv590888c, Trv590883c, Trv590889c  | Error messages displayed successfully for field validation ");
	}

	@Test(description="TIMS ID: Trv589609c, Trv590886c", enabled=true, priority=5) //dependsOnMethods = "saveECDS")
	public void verifyRegisterEnable(){
		
		ECDS.cleanUp(driver);
		// ..Click on the CDS radio button
		Browser.getActions().click(Browser.getElements().element(driver, ElementTags.bttnCDS));

		// enter details
		ECDS.enterDetails(
				driver, ip, port, contentOrigin, username, password);
		Browser.getElements().element(driver,
				ElementTags.bttnRegister).click();

		Browser.getElements().element(driver, ElementTags.txtCDMAddress).clear();
		Browser.getElements().element(driver, ElementTags.txtCDMAddress).sendKeys("10.44.44.20");

		SAssert.assertTrue(Browser.getElements().element(driver, ElementTags.bttnRegister).isEnabled(), "FAILED | TIMS ID: Trv589609c, Trv590886c | Register button is not enabled");

		SAssert.showResults();

		TestStatus.pass("PASSED | TIMS ID: Trv589609c, Trv590886c | Register button enabled after editing fields");

	}

	@Test(description = "TIMS ID: Trv589604c, Trv590879c, Trv590893c ", priority = 6, enabled = true)
	public void verifyRegisterECDS() {

		ECDS.cleanUp(driver);
		// ..Click on the CDS radio button
		Browser.getActions().click(Browser.getElements().element(driver, ElementTags.bttnCDS));

		// enter details
		ECDS.enterDetails(
				driver, ip, port, contentOrigin, username, password);
		Browser.getElements().element(driver,
				ElementTags.bttnRegister).click();

		// verify message
		SAssert.assertTrue(Browser.getElements().element(driver,
				ElementTags.labelMessage).getText().equals(registerMessage1),
				"FAILED | TIMS ID: Trv590879c, Trv589604c, Trv590879c | "+registerMessage1+ "not displayed");
		Browser.getWaits().wait(driver, ElementTags.labelMessage,
				ExpectedCondition.textToBePresentInElementLocated, 15,
				registerMessage2);

		SAssert.assertTrue(Browser.getElements().element(driver,
				ElementTags.labelMessage).getText().equals(registerMessage2),
				"FAILED | TIMS ID: Trv590879c, Trv589604c, Trv590879c | "+registerMessage2+ "not displayed");


		SAssert.showResults();

		TestStatus
		.pass("PASSED | TIMS ID: Trv590879c, Trv590879c, Trv590893c | CDS registered successfully");


	}
	@Test(description="TIMS ID: Trv590898c, Trv589608c , Trv590884c, Trv590885c, Trv590897c, Trv591385c", priority=7, enabled = true, dependsOnMethods = "verifyRegisterECDS")
	public void verifySaveECDS(){

		ECDS.gotoCDSPage(driver);

		// ..Click on the CDS radio button
		Browser.getActions().click(Browser.getElements().element(driver, ElementTags.bttnCDS));


		Browser.getActions().click(Browser.getElements().element(driver, ElementTags.bttnSave));
		SAssert.merge(ECDS.alertConfirm(driver,"Please select at least one DS","Trv590898c"));

		ECDS.save(driver);

		SAssert.merge(ECDS.alertConfirm(driver, "Are you sure to save the DS information ?","Trv591385c"));

		//...verify message
		SAssert.assertTrue(Browser.getElements().element(driver,ElementTags.labelSaveMessage).getText().equals(saveMessage1),"FAILED | TIMS ID: Trv590897c, Trv591385c | "+saveMessage1+ "not displayed");
		Browser.getWaits().wait(driver, ElementTags.labelSaveMessage,
				ExpectedCondition.textToBePresentInElementLocated, 10,
				saveMessage2);

		SAssert.assertTrue(Browser.getElements().element(driver,
				ElementTags.labelSaveMessage).getText().equals(saveMessage2),"FAILED | TIMS ID: Trv590897c, Trv591385c"+saveMessage2+ "not displayed");

		//refresh before verifying metadata
		Browser.getActions().click(Browser.getElements().element(driver, ElementTags.bttnSNS));
		Browser.getActions().click(Browser.getElements().element(driver, ElementTags.bttnCDS));

		SAssert.merge(ECDS.verifyRegisterTableData(driver, "COHO-DEV",
				"ecds.cohotest.com","5000","0 Bytes","Trv589608c , Trv590884c, Trv590885c" ));
			
		SAssert.showResults();

		TestStatus
		.pass("PASSED | TIMS ID: Trv590897c, Trv589608c , Trv590884c, Trv590885c, Trv591385c | CDS saved successfully");

	}

	


	@Test(description="TIMS ID: Trv590826c, Trv590820c, Trv590819c", priority=8, enabled = true, dependsOnMethods = "verifySaveECDS")
	public void verifyDeleteECDS() {

		ECDS.gotoCDSPage(driver);

		Browser.getActions().click(Browser.getElements().element(driver, ElementTags.selectRow));
		Browser.getActions().click(Browser.getElements().element(driver, ElementTags.bttnDelete));

		SAssert.merge(ECDS.alertConfirm(driver, "Are you sure to delete CDS registration ?","Trv590820c, Trv590819c, Trv590826c"));

		// verify message
		SAssert.assertTrue(Browser.getElements().element(driver, ElementTags.labelMessage).getText().equals(deleteMessage1),"FAILED | TIMS ID: Trv590826c, Trv590820c, Trv590819c | "+ deleteMessage1+ "not displayed");
		Browser.getWaits().wait(driver, ElementTags.labelMessage,
				ExpectedCondition.textToBePresentInElementLocated, 12,
				deleteMessage2);

		SAssert.assertTrue(Browser.getElements().element(driver, ElementTags.labelMessage).getText().equals(deleteMessage2),"FAILED | TIMS ID: Trv590826c, Trv590820c, Trv590819c | "+ deleteMessage2+ "not displayed");

		SAssert.showResults();
		TestStatus.pass("PASSED | TIMS ID: Trv590820c, Trv590819c, Trv590826c| CDS deleted successfully.");


	}


	@AfterClass
	public void tearDown() {
		Log.info("logging out");
		Browser.getSwitchto().closePopupWindow(driver, baseWindowHandle);
		Fixtures.tearDownFixture(driver);

	}
}
